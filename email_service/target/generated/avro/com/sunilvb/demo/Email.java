/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sunilvb.demo;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Email extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8021764338722328096L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Email\",\"namespace\":\"com.sunilvb.demo\",\"fields\":[{\"name\":\"clienteDto\",\"type\":{\"type\":\"record\",\"name\":\"clienteDto\",\"fields\":[{\"name\":\"clienteId\",\"type\":\"int\",\"doc\":\"Id of the item\"},{\"name\":\"nome\",\"type\":\"string\",\"doc\":\"Description of the item\"},{\"name\":\"email\",\"type\":\"string\",\"doc\":\"Unit price of the item\"}]}},{\"name\":\"body\",\"type\":\"string\",\"doc\":\"Id of the item\"},{\"name\":\"date\",\"type\":\"string\",\"doc\":\"Description of the item\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Email> ENCODER =
      new BinaryMessageEncoder<Email>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Email> DECODER =
      new BinaryMessageDecoder<Email>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Email> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Email> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Email> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Email>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Email to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Email from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Email instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Email fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private com.sunilvb.demo.clienteDto clienteDto;
  /** Id of the item */
   private java.lang.CharSequence body;
  /** Description of the item */
   private java.lang.CharSequence date;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Email() {}

  /**
   * All-args constructor.
   * @param clienteDto The new value for clienteDto
   * @param body Id of the item
   * @param date Description of the item
   */
  public Email(com.sunilvb.demo.clienteDto clienteDto, java.lang.CharSequence body, java.lang.CharSequence date) {
    this.clienteDto = clienteDto;
    this.body = body;
    this.date = date;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clienteDto;
    case 1: return body;
    case 2: return date;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clienteDto = (com.sunilvb.demo.clienteDto)value$; break;
    case 1: body = (java.lang.CharSequence)value$; break;
    case 2: date = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'clienteDto' field.
   * @return The value of the 'clienteDto' field.
   */
  public com.sunilvb.demo.clienteDto getClienteDto() {
    return clienteDto;
  }


  /**
   * Sets the value of the 'clienteDto' field.
   * @param value the value to set.
   */
  public void setClienteDto(com.sunilvb.demo.clienteDto value) {
    this.clienteDto = value;
  }

  /**
   * Gets the value of the 'body' field.
   * @return Id of the item
   */
  public java.lang.CharSequence getBody() {
    return body;
  }


  /**
   * Sets the value of the 'body' field.
   * Id of the item
   * @param value the value to set.
   */
  public void setBody(java.lang.CharSequence value) {
    this.body = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return Description of the item
   */
  public java.lang.CharSequence getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * Description of the item
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Creates a new Email RecordBuilder.
   * @return A new Email RecordBuilder
   */
  public static com.sunilvb.demo.Email.Builder newBuilder() {
    return new com.sunilvb.demo.Email.Builder();
  }

  /**
   * Creates a new Email RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Email RecordBuilder
   */
  public static com.sunilvb.demo.Email.Builder newBuilder(com.sunilvb.demo.Email.Builder other) {
    if (other == null) {
      return new com.sunilvb.demo.Email.Builder();
    } else {
      return new com.sunilvb.demo.Email.Builder(other);
    }
  }

  /**
   * Creates a new Email RecordBuilder by copying an existing Email instance.
   * @param other The existing instance to copy.
   * @return A new Email RecordBuilder
   */
  public static com.sunilvb.demo.Email.Builder newBuilder(com.sunilvb.demo.Email other) {
    if (other == null) {
      return new com.sunilvb.demo.Email.Builder();
    } else {
      return new com.sunilvb.demo.Email.Builder(other);
    }
  }

  /**
   * RecordBuilder for Email instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Email>
    implements org.apache.avro.data.RecordBuilder<Email> {

    private com.sunilvb.demo.clienteDto clienteDto;
    private com.sunilvb.demo.clienteDto.Builder clienteDtoBuilder;
    /** Id of the item */
    private java.lang.CharSequence body;
    /** Description of the item */
    private java.lang.CharSequence date;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sunilvb.demo.Email.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.clienteDto)) {
        this.clienteDto = data().deepCopy(fields()[0].schema(), other.clienteDto);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasClienteDtoBuilder()) {
        this.clienteDtoBuilder = com.sunilvb.demo.clienteDto.newBuilder(other.getClienteDtoBuilder());
      }
      if (isValidValue(fields()[1], other.body)) {
        this.body = data().deepCopy(fields()[1].schema(), other.body);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Email instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sunilvb.demo.Email other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.clienteDto)) {
        this.clienteDto = data().deepCopy(fields()[0].schema(), other.clienteDto);
        fieldSetFlags()[0] = true;
      }
      this.clienteDtoBuilder = null;
      if (isValidValue(fields()[1], other.body)) {
        this.body = data().deepCopy(fields()[1].schema(), other.body);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'clienteDto' field.
      * @return The value.
      */
    public com.sunilvb.demo.clienteDto getClienteDto() {
      return clienteDto;
    }


    /**
      * Sets the value of the 'clienteDto' field.
      * @param value The value of 'clienteDto'.
      * @return This builder.
      */
    public com.sunilvb.demo.Email.Builder setClienteDto(com.sunilvb.demo.clienteDto value) {
      validate(fields()[0], value);
      this.clienteDtoBuilder = null;
      this.clienteDto = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'clienteDto' field has been set.
      * @return True if the 'clienteDto' field has been set, false otherwise.
      */
    public boolean hasClienteDto() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'clienteDto' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.sunilvb.demo.clienteDto.Builder getClienteDtoBuilder() {
      if (clienteDtoBuilder == null) {
        if (hasClienteDto()) {
          setClienteDtoBuilder(com.sunilvb.demo.clienteDto.newBuilder(clienteDto));
        } else {
          setClienteDtoBuilder(com.sunilvb.demo.clienteDto.newBuilder());
        }
      }
      return clienteDtoBuilder;
    }

    /**
     * Sets the Builder instance for the 'clienteDto' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.sunilvb.demo.Email.Builder setClienteDtoBuilder(com.sunilvb.demo.clienteDto.Builder value) {
      clearClienteDto();
      clienteDtoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'clienteDto' field has an active Builder instance
     * @return True if the 'clienteDto' field has an active Builder instance
     */
    public boolean hasClienteDtoBuilder() {
      return clienteDtoBuilder != null;
    }

    /**
      * Clears the value of the 'clienteDto' field.
      * @return This builder.
      */
    public com.sunilvb.demo.Email.Builder clearClienteDto() {
      clienteDto = null;
      clienteDtoBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'body' field.
      * Id of the item
      * @return The value.
      */
    public java.lang.CharSequence getBody() {
      return body;
    }


    /**
      * Sets the value of the 'body' field.
      * Id of the item
      * @param value The value of 'body'.
      * @return This builder.
      */
    public com.sunilvb.demo.Email.Builder setBody(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.body = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'body' field has been set.
      * Id of the item
      * @return True if the 'body' field has been set, false otherwise.
      */
    public boolean hasBody() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'body' field.
      * Id of the item
      * @return This builder.
      */
    public com.sunilvb.demo.Email.Builder clearBody() {
      body = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * Description of the item
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * Description of the item
      * @param value The value of 'date'.
      * @return This builder.
      */
    public com.sunilvb.demo.Email.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.date = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * Description of the item
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'date' field.
      * Description of the item
      * @return This builder.
      */
    public com.sunilvb.demo.Email.Builder clearDate() {
      date = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Email build() {
      try {
        Email record = new Email();
        if (clienteDtoBuilder != null) {
          try {
            record.clienteDto = this.clienteDtoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("clienteDto"));
            throw e;
          }
        } else {
          record.clienteDto = fieldSetFlags()[0] ? this.clienteDto : (com.sunilvb.demo.clienteDto) defaultValue(fields()[0]);
        }
        record.body = fieldSetFlags()[1] ? this.body : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.date = fieldSetFlags()[2] ? this.date : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Email>
    WRITER$ = (org.apache.avro.io.DatumWriter<Email>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Email>
    READER$ = (org.apache.avro.io.DatumReader<Email>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.clienteDto.customEncode(out);

    out.writeString(this.body);

    out.writeString(this.date);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.clienteDto == null) {
        this.clienteDto = new com.sunilvb.demo.clienteDto();
      }
      this.clienteDto.customDecode(in);

      this.body = in.readString(this.body instanceof Utf8 ? (Utf8)this.body : null);

      this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.clienteDto == null) {
            this.clienteDto = new com.sunilvb.demo.clienteDto();
          }
          this.clienteDto.customDecode(in);
          break;

        case 1:
          this.body = in.readString(this.body instanceof Utf8 ? (Utf8)this.body : null);
          break;

        case 2:
          this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










